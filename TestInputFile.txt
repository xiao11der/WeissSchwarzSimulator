// "//" is comment, it will not be parsed
// # marks the beginning of a section, make sure it is "CONFIG", "SELF", "OPPONENT", "ATTACK"
// ATTACK must come last
// soul must be defined FIRST in attack section
// ## marks the end of a section
// % Marks the beginning of attack action step, make sure it is "OnAttack", "OnCancel", or "PostAttack", this must be embedded in attack sections
// %% marks the end of an attack action step
// * marks the beginning of an effect, currently supports "BurnX"
// ** marks the end of an effect

//Python Notes
//You can write a python script and put it in effects to implement your own effects based on top or bottom X checks from either player's decks
//Parameters: 
//PLAYER ("self"/"opponent") - check opponent or yourself
//AMOUNT (int) - how many to check
//FILE - file name (without .py) of the script you intend on running
//POSITION ("top"/"bottom") - where to check? Top or bottom of deck
//POST_CHECK ("TO_WR"/"TO_TOP"/"TO_BOTTOM"/"RETURN_AND_SHUFFLE")  - where to put the cards after checking, to top is back where they came from in the same order, to bottom is to bottom in reverse order, to wr is mill, and return_and_shuffle is return and shuffle.
//Python script needs to read a string of text representing cards, deliminated by "|" and ":", parser to be written

//CONFIG
#CONFIG
MAX_ITER = 200
TRIGGER = TRUE
##

//SELF GAME STATE
#SELF
GAME_STATE_TYPE = SIMPLE
NO_OF_CARDS_IN_DECK = 50
NO_OF_TRIGGER_IN_DECK = 15
NO_OF_CARDS_IN_WR = 0
NO_OF_CX_IN_DECK = 8
NO_OF_CX_IN_WR = 0
##

//OPPONENT GAME STATE
#OPPONENT
GAME_STATE_TYPE = SIMPLE
NO_OF_CARDS_IN_DECK = 30
NO_OF_CX_IN_DECK = 8
NO_OF_CARDS_IN_WR = 20
NO_OF_CX_IN_WR = 0
##

//ATTACK SEQUENCE
#ATTACK

SOUL = 3

%OnAttack

*PYTHON
FILE = Test
PLAYER = OPPONENT
AMOUNT = 5

POSITION = TOP
POST_CHECK = TO_TOP
**

%%

##




